{"$message_type":"diagnostic","message":"the function or associated item `from_pkcs8_pem` exists for struct `SigningKey`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/ed25519_kg.rs","byte_start":196,"byte_end":210,"line_start":9,"line_end":9,"column_start":35,"column_end":49,"is_primary":true,"text":[{"text":"    let signing_key = SigningKey::from_pkcs8_pem(&String::from_utf8(data).unwrap()).unwrap();","highlight_start":35,"highlight_end":49}],"label":"function or associated item cannot be called on `SigningKey` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/vincent/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ed25519-dalek-2.1.1/src/signing.rs","byte_start":1719,"byte_end":1740,"line_start":64,"line_end":64,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"pub struct SigningKey {","highlight_start":1,"highlight_end":22}],"label":"doesn't satisfy `<_ as TryFrom<PrivateKeyInfo<'a>>>::Error = Error`, `_: TryFrom<PrivateKeyInfo<'a>>` or `ed25519_dalek::SigningKey: DecodePrivateKey`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `ed25519_dalek::SigningKey` consider using one of the following associated functions:\ned25519_dalek::SigningKey::from_bytes\ned25519_dalek::SigningKey::from_keypair_bytes\ned25519_dalek::SigningKey::generate","code":null,"level":"note","spans":[{"file_name":"/home/vincent/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ed25519-dalek-2.1.1/src/signing.rs","byte_start":2790,"byte_end":2839,"line_start":102,"line_end":102,"column_start":5,"column_end":54,"is_primary":true,"text":[{"text":"    pub fn from_bytes(secret_key: &SecretKey) -> Self {","highlight_start":5,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/vincent/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ed25519-dalek-2.1.1/src/signing.rs","byte_start":3905,"byte_end":3986,"line_start":136,"line_end":136,"column_start":5,"column_end":86,"is_primary":true,"text":[{"text":"    pub fn from_keypair_bytes(bytes: &[u8; 64]) -> Result<SigningKey, SignatureError> {","highlight_start":5,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/vincent/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ed25519-dalek-2.1.1/src/signing.rs","byte_start":6608,"byte_end":6680,"line_start":206,"line_end":206,"column_start":5,"column_end":77,"is_primary":true,"text":[{"text":"    pub fn generate<R: CryptoRngCore + ?Sized>(csprng: &mut R) -> SigningKey {","highlight_start":5,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`<ed25519_dalek::SigningKey as TryFrom<PrivateKeyInfo<'a>>>::Error = pkcs8::Error`\nwhich is required by `ed25519_dalek::SigningKey: DecodePrivateKey`\n`ed25519_dalek::SigningKey: TryFrom<PrivateKeyInfo<'a>>`\nwhich is required by `ed25519_dalek::SigningKey: DecodePrivateKey`\n`<&ed25519_dalek::SigningKey as TryFrom<PrivateKeyInfo<'a>>>::Error = pkcs8::Error`\nwhich is required by `&ed25519_dalek::SigningKey: DecodePrivateKey`\n`&ed25519_dalek::SigningKey: TryFrom<PrivateKeyInfo<'a>>`\nwhich is required by `&ed25519_dalek::SigningKey: DecodePrivateKey`\n`<&mut ed25519_dalek::SigningKey as TryFrom<PrivateKeyInfo<'a>>>::Error = pkcs8::Error`\nwhich is required by `&mut ed25519_dalek::SigningKey: DecodePrivateKey`\n`&mut ed25519_dalek::SigningKey: TryFrom<PrivateKeyInfo<'a>>`\nwhich is required by `&mut ed25519_dalek::SigningKey: DecodePrivateKey`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the function or associated item `from_pkcs8_pem` exists for struct `SigningKey`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ed25519_kg.rs:9:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let signing_key = SigningKey::from_pkcs8_pem(&String::from_utf8(data).unwrap()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called on `SigningKey` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/vincent/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ed25519-dalek-2.1.1/src/signing.rs:64:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct SigningKey {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as TryFrom<PrivateKeyInfo<'a>>>::Error = Error`, `_: TryFrom<PrivateKeyInfo<'a>>` or `ed25519_dalek::SigningKey: DecodePrivateKey`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `ed25519_dalek::SigningKey` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      ed25519_dalek::SigningKey::from_bytes\u001b[0m\n\u001b[0m      ed25519_dalek::SigningKey::from_keypair_bytes\u001b[0m\n\u001b[0m      ed25519_dalek::SigningKey::generate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/vincent/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ed25519-dalek-2.1.1/src/signing.rs:102:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_bytes(secret_key: &SecretKey) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_keypair_bytes(bytes: &[u8; 64]) -> Result<SigningKey, SignatureError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn generate<R: CryptoRngCore + ?Sized>(csprng: &mut R) -> SigningKey {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `<ed25519_dalek::SigningKey as TryFrom<PrivateKeyInfo<'a>>>::Error = pkcs8::Error`\u001b[0m\n\u001b[0m            which is required by `ed25519_dalek::SigningKey: DecodePrivateKey`\u001b[0m\n\u001b[0m            `ed25519_dalek::SigningKey: TryFrom<PrivateKeyInfo<'a>>`\u001b[0m\n\u001b[0m            which is required by `ed25519_dalek::SigningKey: DecodePrivateKey`\u001b[0m\n\u001b[0m            `<&ed25519_dalek::SigningKey as TryFrom<PrivateKeyInfo<'a>>>::Error = pkcs8::Error`\u001b[0m\n\u001b[0m            which is required by `&ed25519_dalek::SigningKey: DecodePrivateKey`\u001b[0m\n\u001b[0m            `&ed25519_dalek::SigningKey: TryFrom<PrivateKeyInfo<'a>>`\u001b[0m\n\u001b[0m            which is required by `&ed25519_dalek::SigningKey: DecodePrivateKey`\u001b[0m\n\u001b[0m            `<&mut ed25519_dalek::SigningKey as TryFrom<PrivateKeyInfo<'a>>>::Error = pkcs8::Error`\u001b[0m\n\u001b[0m            which is required by `&mut ed25519_dalek::SigningKey: DecodePrivateKey`\u001b[0m\n\u001b[0m            `&mut ed25519_dalek::SigningKey: TryFrom<PrivateKeyInfo<'a>>`\u001b[0m\n\u001b[0m            which is required by `&mut ed25519_dalek::SigningKey: DecodePrivateKey`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `to_public_key_pem` found for struct `ed25519_dalek::VerifyingKey` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/ed25519_kg.rs","byte_start":342,"byte_end":359,"line_start":11,"line_end":11,"column_start":29,"column_end":46,"is_primary":true,"text":[{"text":"    let pem = verifying_key.to_public_key_pem(pkcs8::LineEnding::LF).unwrap();","highlight_start":29,"highlight_end":46}],"label":"method not found in `VerifyingKey`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `to_public_key_pem` found for struct `ed25519_dalek::VerifyingKey` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ed25519_kg.rs:11:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let pem = verifying_key.to_public_key_pem(pkcs8::LineEnding::LF).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `VerifyingKey`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `DecodePrivateKey`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/ed25519_kg.rs","byte_start":76,"byte_end":92,"line_start":2,"line_end":2,"column_start":30,"column_end":46,"is_primary":true,"text":[{"text":"use pkcs8::{EncodePublicKey, DecodePrivateKey};","highlight_start":30,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `DecodePrivateKey`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ed25519_kg.rs:2:30\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse pkcs8::{EncodePublicKey, DecodePrivateKey};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `EncodePublicKey`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/ed25519_kg.rs","byte_start":59,"byte_end":74,"line_start":2,"line_end":2,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"use pkcs8::{EncodePublicKey, DecodePrivateKey};","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `EncodePublicKey`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ed25519_kg.rs:2:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse pkcs8::{EncodePublicKey, DecodePrivateKey};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}
